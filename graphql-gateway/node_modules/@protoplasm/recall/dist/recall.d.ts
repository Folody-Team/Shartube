import { Fn, Result } from './report';
export declare type Recall<F extends Fn> = F & {
    getResult(this: ThisParameterType<F>, ...args: Parameters<F>): Result<ReturnType<F>>;
    getExisting(this: ThisParameterType<F>, ...args: Parameters<F>): Result<ReturnType<F>> | undefined;
};
export declare type StrongRecall<F extends Fn> = F & {
    getResult(this: ThisParameterType<F>, ...args: Parameters<F>): Result<ReturnType<F>>;
    getExisting(this: ThisParameterType<F>, ...args: Parameters<F>): Result<ReturnType<F>> | undefined;
    eachExisting(this: ThisParameterType<F>, ...args: Prefix<Parameters<F>>): Iterable<[[ThisParameterType<F>, ...Parameters<F>], Result<ReturnType<F>>]>;
};
declare type Prefix<A extends any[]> = [] | [A[0]] | [A[0], A[1]] | [A[0], A[1], A[2]] | [A[0], A[1], A[3], A[4]] | [A[0], A[1], A[3], A[4], A[5]] | [A[0], A[1], A[3], A[4], A[5], A[6]] | [A[0], A[1], A[3], A[4], A[5], A[6], A[7]] | [A[0], A[1], A[3], A[4], A[5], A[6], A[7], A[8]];
declare type RecallFn = <F extends Fn>(fn: F) => Recall<F>;
export declare const recall: RecallFn;
export default recall;
//# sourceMappingURL=recall.d.ts.map