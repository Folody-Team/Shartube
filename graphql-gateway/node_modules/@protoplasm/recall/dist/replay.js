"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Record_instances, _Record_iter, _Record_results, _Record_done_get, _Record_advance;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Record = exports.replay = void 0;
const recall_1 = __importDefault(require("./recall"));
const report_1 = require("./report");
function replay(fn) {
    return (0, recall_1.default)(call);
    function call(...args) {
        const result = (0, report_1.execute)(fn, this, args);
        if (result.isThrow())
            throw result.error;
        return new Record(result);
    }
}
exports.replay = replay;
class Record {
    constructor(base) {
        _Record_instances.add(this);
        _Record_iter.set(this, void 0);
        _Record_results.set(this, null);
        __classPrivateFieldSet(this, _Record_iter, base.data, "f");
    }
    *[(_Record_iter = new WeakMap(), _Record_results = new WeakMap(), _Record_instances = new WeakSet(), Symbol.iterator)]() {
        for (const result of this.results()) {
            (0, report_1.report)(result.log);
            if (result.isThrow())
                throw result.error;
            const { done, value } = result.data;
            if (!done)
                yield value;
        }
    }
    *results() {
        var _a;
        const results = (_a = __classPrivateFieldGet(this, _Record_results, "f")) !== null && _a !== void 0 ? _a : __classPrivateFieldGet(this, _Record_instances, "m", _Record_advance).call(this);
        let index = 0;
        while (index < results.length) {
            yield results[index++];
            if (index >= results.length && !__classPrivateFieldGet(this, _Record_instances, "a", _Record_done_get))
                __classPrivateFieldGet(this, _Record_instances, "m", _Record_advance).call(this);
        }
    }
}
exports.Record = Record;
_Record_done_get = function _Record_done_get() {
    if (!__classPrivateFieldGet(this, _Record_results, "f"))
        return false;
    const last = __classPrivateFieldGet(this, _Record_results, "f")[__classPrivateFieldGet(this, _Record_results, "f").length - 1];
    if (last.isThrow())
        return true;
    return last.data.done;
}, _Record_advance = function _Record_advance() {
    if (!__classPrivateFieldGet(this, _Record_results, "f"))
        return __classPrivateFieldSet(this, _Record_results, [(0, report_1.execute)(__classPrivateFieldGet(this, _Record_iter, "f").next, __classPrivateFieldGet(this, _Record_iter, "f"), NO_ARGS)], "f");
    __classPrivateFieldGet(this, _Record_results, "f").push((0, report_1.execute)(__classPrivateFieldGet(this, _Record_iter, "f").next, __classPrivateFieldGet(this, _Record_iter, "f"), NO_ARGS));
    return __classPrivateFieldGet(this, _Record_results, "f");
};
const NO_ARGS = [];
exports.default = replay;
//# sourceMappingURL=replay.js.map