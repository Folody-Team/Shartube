"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResult = exports.execute = exports.report = exports.Report = exports.Exit = void 0;
class Exit {
    constructor(exit, log, data) {
        this.exit = exit;
        this.log = log;
        this.data = data;
    }
    isThrow() {
        return this.exit === 'throw';
    }
    isReturn() {
        return this.exit === 'return';
    }
    unwrap(printReportedError) {
        if (printReportedError)
            for (const error of this.log.filter(isError))
                printReportedError(error);
        if (this.isReturn())
            return this.data;
        throw this.data;
    }
    get error() { return this.data; }
    *errors() {
        for (const error of this.log.filter(isError))
            yield error;
        if (this.isThrow() && this.error instanceof Error)
            yield this.error;
    }
}
exports.Exit = Exit;
function isError(m) {
    return m instanceof Error;
}
const YES = () => true;
class Report {
    *[Symbol.iterator]() {
        if (!this.messages)
            return;
        for (const m of this.messages) {
            if (m instanceof Report)
                yield* m;
            else
                yield m;
        }
    }
    *filter(pred = YES) {
        for (const m of this)
            if (pred(m))
                yield m;
    }
    report(msg) {
        if (!this.messages)
            this.messages = [];
        this.messages.push(msg);
    }
}
exports.Report = Report;
let currentLog = null;
function report(msg) {
    currentLog === null || currentLog === void 0 ? void 0 : currentLog.report(msg);
    return msg;
}
exports.report = report;
function execute(fn, self, args) {
    const lastLog = currentLog;
    const log = new Report;
    let exit = 'return';
    let data = null;
    try {
        currentLog = log;
        data = fn.apply(self, args);
    }
    catch (error) {
        exit = 'throw';
        data = error;
    }
    finally {
        currentLog = lastLog;
    }
    return new Exit(exit, log, data);
}
exports.execute = execute;
function getResult(fn) {
    return execute(fn, undefined, NO_ARGS);
}
exports.getResult = getResult;
const NO_ARGS = [];
//# sourceMappingURL=report.js.map