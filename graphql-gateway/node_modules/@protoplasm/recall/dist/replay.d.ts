import { Result, Return } from './report';
export declare type ItemOf<I extends Iterator<any>> = I extends Iterator<infer T> ? T : never;
export declare type IterFn = (...args: any) => Iterator<any>;
export interface Replay<F extends IterFn> {
    (...args: Parameters<F>): ReplayIterable<ItemOf<ReturnType<F>>>;
}
export interface ReplayIterable<T> extends Iterable<T> {
    results(): Iterable<Result<IteratorResult<T>>>;
}
export declare function replay<F extends IterFn>(fn: F): Replay<F>;
export declare class Record<T> implements ReplayIterable<T> {
    #private;
    constructor(base: Return<Iterator<T>>);
    [Symbol.iterator](): Generator<T, void, unknown>;
    results(): Generator<Result<IteratorResult<T, any>>, void, unknown>;
}
export default replay;
//# sourceMappingURL=replay.d.ts.map