import { type ASTKindToNode, type ASTNode, type NameNode } from 'graphql';
export declare function isAst<K extends ASTNode["kind"] = ASTNode["kind"]>(obj: any, ...kinds: K[]): obj is ASTKindToNode[K];
export declare type ToDefinitionKind<T> = T extends `${infer _}Definition` ? T : T extends `${infer K}Extension` ? `${K}Definition` : undefined;
export declare function toDefinitionKind<K extends string>(kind: K): ToDefinitionKind<K>;
export declare const hasName: <T>(o: T) => o is T & {
    name: NameNode;
};
export declare const byName: <T extends unknown>(...sources: Iterable<T>[]) => Readonly<Map<any, Iterable<T>>>;
export declare const byKind: <T extends unknown>(...sources: Iterable<T>[]) => Readonly<Map<any, Iterable<T>>>;
//# sourceMappingURL=is.d.ts.map