"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.concat = exports.flat = exports.groupBy = exports.maybeOne = exports.maybe = exports.only = exports.first = exports.ErrTooMany = exports.ErrEmpty = void 0;
const recall_1 = __importStar(require("@protoplasm/recall"));
const error_1 = __importDefault(require("./error"));
const ErrEmpty = (iterable) => (0, error_1.default)('Empty', {
    message: 'expected at least one value, found zero',
    iterable
});
exports.ErrEmpty = ErrEmpty;
const ErrTooMany = (iterable) => (0, error_1.default)('TooMany', {
    message: 'expected at most one value, found more',
    iterable
});
exports.ErrTooMany = ErrTooMany;
function first(iter) {
    if (!iter)
        throw (0, exports.ErrEmpty)(iter);
    const it = iter[Symbol.iterator]();
    const r = it.next();
    if (r.done)
        throw (0, exports.ErrEmpty)(iter);
    return r.value;
}
exports.first = first;
function only(iter) {
    if (!iter)
        throw (0, exports.ErrEmpty)(iter);
    const it = iter[Symbol.iterator]();
    const r = it.next();
    if (r.done)
        throw (0, exports.ErrEmpty)(iter);
    try {
        return r.value;
    }
    finally {
        if (!it.next().done)
            throw (0, exports.ErrTooMany)(iter);
    }
}
exports.only = only;
function maybe(iter) {
    if (!iter)
        return undefined;
    const it = iter[Symbol.iterator]();
    const r = it.next();
    return r.value;
}
exports.maybe = maybe;
function maybeOne(iter) {
    if (!iter)
        return;
    const it = iter[Symbol.iterator]();
    const r = it.next();
    if (r.done)
        return;
    try {
        return r.value;
    }
    finally {
        if (!it.next().done)
            throw (0, exports.ErrTooMany)(iter);
    }
}
exports.maybeOne = maybeOne;
exports.groupBy = (0, recall_1.default)((grouper) => {
    const groupSources = (0, recall_1.default)((...sources) => {
        var _a;
        if (sources.length === 0)
            return Object.freeze(new Map);
        if (sources.length > 1) {
            const defs = new Map();
            for (const src of sources)
                for (const ent of groupSources(src))
                    defs.set(ent[0], Object.freeze(((_a = defs.get(ent[0])) !== null && _a !== void 0 ? _a : []).concat(ent[1])));
            return Object.freeze(defs);
        }
        const [source] = sources;
        const defs = new Map();
        for (const def of source) {
            const key = grouper(def);
            const existing = defs.get(key);
            if (existing)
                existing.push(def);
            else
                defs.set(key, [def]);
        }
        for (const ary of defs.values()) {
            Object.freeze(ary);
        }
        return Object.freeze(defs);
    });
    return groupSources;
});
exports.flat = (0, recall_1.replay)(function* flat(iters) {
    for (const iter of iters)
        yield* iter;
});
const concat = (...iters) => (0, exports.flat)(iters);
exports.concat = concat;
//# sourceMappingURL=each.js.map