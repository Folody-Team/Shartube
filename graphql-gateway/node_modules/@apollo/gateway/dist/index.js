"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UplinkFetcherError = exports.LocalCompose = exports.IntrospectAndCompose = exports.buildOperationContext = exports.executeQueryPlan = exports.ApolloGateway = exports.SERVICE_DEFINITION_QUERY = exports.HEALTH_CHECK_QUERY = void 0;
const util_1 = require("util");
const utils_createhash_1 = require("@apollo/utils.createhash");
const apollo_server_caching_1 = require("apollo-server-caching");
const graphql_1 = require("graphql");
const loglevel_1 = __importDefault(require("loglevel"));
const operationContext_1 = require("./operationContext");
Object.defineProperty(exports, "buildOperationContext", { enumerable: true, get: function () { return operationContext_1.buildOperationContext; } });
const executeQueryPlan_1 = require("./executeQueryPlan");
Object.defineProperty(exports, "executeQueryPlan", { enumerable: true, get: function () { return executeQueryPlan_1.executeQueryPlan; } });
const types_1 = require("./datasources/types");
const RemoteGraphQLDataSource_1 = require("./datasources/RemoteGraphQLDataSource");
const values_1 = require("graphql/execution/values");
const make_fetch_happen_1 = __importDefault(require("make-fetch-happen"));
const query_planner_1 = require("@apollo/query-planner");
const config_1 = require("./config");
const api_1 = require("@opentelemetry/api");
const opentelemetry_1 = require("./utilities/opentelemetry");
const addExtensions_1 = require("./schema-helper/addExtensions");
const supergraphManagers_1 = require("./supergraphManagers");
Object.defineProperty(exports, "IntrospectAndCompose", { enumerable: true, get: function () { return supergraphManagers_1.IntrospectAndCompose; } });
Object.defineProperty(exports, "LocalCompose", { enumerable: true, get: function () { return supergraphManagers_1.LocalCompose; } });
const federation_internals_1 = require("@apollo/federation-internals");
exports.HEALTH_CHECK_QUERY = 'query __ApolloServiceHealthCheck__ { __typename }';
exports.SERVICE_DEFINITION_QUERY = 'query __ApolloGetServiceDefinition__ { _service { sdl } }';
class ApolloGateway {
    constructor(config) {
        var _a, _b;
        this.serviceMap = Object.create(null);
        this.onSchemaChangeListeners = new Set();
        this.onSchemaLoadOrUpdateListeners = new Set();
        this.warnedStates = Object.create(null);
        this.toDispose = [];
        this.executor = async (requestContext) => {
            const spanAttributes = requestContext.operationName
                ? { operationName: requestContext.operationName }
                : {};
            return opentelemetry_1.tracer.startActiveSpan(opentelemetry_1.OpenTelemetrySpanNames.REQUEST, { attributes: spanAttributes }, async (span) => {
                try {
                    const { request, document, queryHash } = requestContext;
                    const queryPlanStoreKey = queryHash + (request.operationName || '');
                    const operationContext = (0, operationContext_1.buildOperationContext)({
                        schema: this.schema,
                        operationDocument: document,
                        operationName: request.operationName,
                    });
                    const validationErrors = this.validateIncomingRequest(requestContext, operationContext);
                    if (validationErrors.length > 0) {
                        span.setStatus({ code: api_1.SpanStatusCode.ERROR });
                        return { errors: validationErrors };
                    }
                    let queryPlan;
                    if (this.queryPlanStore) {
                        queryPlan = await this.queryPlanStore.get(queryPlanStoreKey);
                    }
                    if (!queryPlan) {
                        queryPlan = opentelemetry_1.tracer.startActiveSpan(opentelemetry_1.OpenTelemetrySpanNames.PLAN, (span) => {
                            try {
                                const operation = (0, federation_internals_1.operationFromDocument)(this.apiSchema, document, request.operationName);
                                return this.queryPlanner.buildQueryPlan(operation);
                            }
                            catch (err) {
                                span.setStatus({ code: api_1.SpanStatusCode.ERROR });
                                throw err;
                            }
                            finally {
                                span.end();
                            }
                        });
                        if (this.queryPlanStore) {
                            Promise.resolve(this.queryPlanStore.set(queryPlanStoreKey, queryPlan)).catch((err) => this.logger.warn('Could not store queryPlan' + ((err && err.message) || err)));
                        }
                    }
                    const serviceMap = Object.entries(this.serviceMap).reduce((serviceDataSources, [serviceName, { dataSource }]) => {
                        serviceDataSources[serviceName] = dataSource;
                        return serviceDataSources;
                    }, Object.create(null));
                    if (this.experimental_didResolveQueryPlan) {
                        this.experimental_didResolveQueryPlan({
                            queryPlan,
                            serviceMap,
                            requestContext,
                            operationContext,
                        });
                    }
                    const response = await (0, executeQueryPlan_1.executeQueryPlan)(queryPlan, serviceMap, requestContext, operationContext);
                    const shouldShowQueryPlan = this.config.__exposeQueryPlanExperimental &&
                        request.http &&
                        request.http.headers &&
                        request.http.headers.get('Apollo-Query-Plan-Experimental');
                    const serializedQueryPlan = queryPlan.node && (this.config.debug || shouldShowQueryPlan)
                        ?
                            (0, query_planner_1.prettyFormatQueryPlan)(queryPlan)
                        : null;
                    if (this.config.debug && serializedQueryPlan) {
                        this.logger.debug(serializedQueryPlan);
                    }
                    if (shouldShowQueryPlan) {
                        response.extensions = {
                            __queryPlanExperimental: serializedQueryPlan || true,
                        };
                    }
                    if (response.errors) {
                        span.setStatus({ code: api_1.SpanStatusCode.ERROR });
                    }
                    return response;
                }
                catch (err) {
                    span.setStatus({ code: api_1.SpanStatusCode.ERROR });
                    throw err;
                }
                finally {
                    span.end();
                }
            });
        };
        this.config = {
            __exposeQueryPlanExperimental: process.env.NODE_ENV !== 'production',
            ...config,
        };
        this.logger = this.initLogger();
        this.queryPlanStore = this.initQueryPlanStore(config === null || config === void 0 ? void 0 : config.experimental_approximateQueryPlanStoreMiB);
        this.fetcher = (config === null || config === void 0 ? void 0 : config.fetcher) || make_fetch_happen_1.default;
        this.experimental_didResolveQueryPlan =
            config === null || config === void 0 ? void 0 : config.experimental_didResolveQueryPlan;
        this.experimental_didUpdateSupergraph =
            config === null || config === void 0 ? void 0 : config.experimental_didUpdateSupergraph;
        if ((0, config_1.isManagedConfig)(this.config)) {
            this.pollIntervalInMs =
                (_a = this.config.fallbackPollIntervalInMs) !== null && _a !== void 0 ? _a : this.config.pollIntervalInMs;
        }
        else if ((0, config_1.isServiceListConfig)(this.config)) {
            this.pollIntervalInMs = (_b = this.config) === null || _b === void 0 ? void 0 : _b.pollIntervalInMs;
        }
        this.issueConfigurationWarningsIfApplicable();
        this.logger.debug('Gateway successfully initialized (but not yet loaded)');
        this.state = { phase: 'initialized' };
    }
    initLogger() {
        if (this.config.logger) {
            return this.config.logger;
        }
        const loglevelLogger = loglevel_1.default.getLogger(`apollo-gateway`);
        if (this.config.debug === true) {
            loglevelLogger.setLevel(loglevelLogger.levels.DEBUG);
        }
        else {
            loglevelLogger.setLevel(loglevelLogger.levels.WARN);
        }
        return loglevelLogger;
    }
    initQueryPlanStore(approximateQueryPlanStoreMiB) {
        return new apollo_server_caching_1.InMemoryLRUCache({
            maxSize: Math.pow(2, 20) * (approximateQueryPlanStoreMiB || 30),
            sizeCalculator: approximateObjectSize,
        });
    }
    issueConfigurationWarningsIfApplicable() {
        if ((0, config_1.isManagedConfig)(this.config) &&
            this.pollIntervalInMs &&
            this.pollIntervalInMs < 10000) {
            this.pollIntervalInMs = 10000;
            this.logger.warn('Polling Apollo services at a frequency of less than once per 10 ' +
                'seconds (10000) is disallowed. Instead, the minimum allowed ' +
                'pollInterval of 10000 will be used. Please reconfigure your ' +
                '`fallbackPollIntervalInMs` accordingly. If this is problematic for ' +
                'your team, please contact support.');
        }
        if (this.pollIntervalInMs && (0, config_1.isServiceListConfig)(this.config)) {
            this.logger.warn('Polling running services is dangerous and not recommended in production. ' +
                'Polling should only be used against a registry. ' +
                'If you are polling running services, use with caution.');
        }
        if ((0, config_1.isManuallyManagedConfig)(this.config) &&
            'experimental_updateSupergraphSdl' in this.config &&
            'experimental_updateServiceDefinitions' in this.config) {
            this.logger.warn('Gateway found two manual update configurations when only one should be ' +
                'provided. Gateway will default to using the provided `experimental_updateSupergraphSdl` ' +
                'function when both `experimental_updateSupergraphSdl` and experimental_updateServiceDefinitions` ' +
                'are provided.');
        }
        if ('schemaConfigDeliveryEndpoint' in this.config) {
            this.logger.warn('The `schemaConfigDeliveryEndpoint` option is deprecated and will be removed in a future version of `@apollo/gateway`. Please migrate to the equivalent (array form) `uplinkEndpoints` configuration option.');
        }
        if ((0, config_1.isManagedConfig)(this.config) && 'pollIntervalInMs' in this.config) {
            this.logger.warn('The `pollIntervalInMs` option is deprecated and will be removed in a future version of `@apollo/gateway`. ' +
                'Please migrate to the equivalent `fallbackPollIntervalInMs` configuration option. ' +
                'The poll interval is now defined by Uplink, this option will only be used if it is greater than the value defined by Uplink or as a fallback.');
        }
    }
    async load(options) {
        var _a, _b, _c, _d;
        this.logger.debug('Loading gateway...');
        if (this.state.phase !== 'initialized') {
            throw Error(`ApolloGateway.load called in surprising state ${this.state.phase}`);
        }
        if (options === null || options === void 0 ? void 0 : options.apollo) {
            const { key, keyHash, graphRef, graphId, graphVariant } = options.apollo;
            this.apolloConfig = {
                key,
                keyHash,
                graphRef: graphRef !== null && graphRef !== void 0 ? graphRef : (graphId ? `${graphId}@${graphVariant !== null && graphVariant !== void 0 ? graphVariant : 'current'}` : undefined),
            };
        }
        else if (options === null || options === void 0 ? void 0 : options.engine) {
            const { apiKeyHash, graphId, graphVariant } = options.engine;
            this.apolloConfig = {
                keyHash: apiKeyHash,
                graphRef: graphId
                    ? `${graphId}@${graphVariant !== null && graphVariant !== void 0 ? graphVariant : 'current'}`
                    : undefined,
            };
        }
        this.maybeWarnOnConflictingConfig();
        if ((0, config_1.isStaticSupergraphSdlConfig)(this.config)) {
            const supergraphSdl = this.config.supergraphSdl;
            await this.initializeSupergraphManager({
                initialize: async () => {
                    return {
                        supergraphSdl,
                    };
                },
            });
        }
        else if ((0, config_1.isLocalConfig)(this.config)) {
            await this.initializeSupergraphManager(new supergraphManagers_1.LocalCompose({
                localServiceList: this.config.localServiceList,
                logger: this.logger,
            }));
        }
        else if ((0, config_1.isManuallyManagedSupergraphSdlGatewayConfig)(this.config)) {
            const supergraphManager = typeof this.config.supergraphSdl === 'object'
                ? this.config.supergraphSdl
                : { initialize: this.config.supergraphSdl };
            await this.initializeSupergraphManager(supergraphManager);
        }
        else if ('experimental_updateServiceDefinitions' in this.config ||
            'experimental_updateSupergraphSdl' in this.config) {
            const updateServiceDefinitions = 'experimental_updateServiceDefinitions' in this.config
                ? this.config.experimental_updateServiceDefinitions
                : this.config.experimental_updateSupergraphSdl;
            await this.initializeSupergraphManager(new supergraphManagers_1.LegacyFetcher({
                logger: this.logger,
                gatewayConfig: this.config,
                updateServiceDefinitions,
                pollIntervalInMs: this.pollIntervalInMs,
                subgraphHealthCheck: this.config.serviceHealthCheck,
            }));
        }
        else if ((0, config_1.isServiceListConfig)(this.config)) {
            this.logger.warn('The `serviceList` option is deprecated and will be removed in a future version of `@apollo/gateway`. Please migrate to its replacement `IntrospectAndCompose`. More information on `IntrospectAndCompose` can be found in the documentation.');
            await this.initializeSupergraphManager(new supergraphManagers_1.IntrospectAndCompose({
                subgraphs: this.config.serviceList,
                pollIntervalInMs: this.pollIntervalInMs,
                logger: this.logger,
                subgraphHealthCheck: this.config.serviceHealthCheck,
                introspectionHeaders: this.config.introspectionHeaders,
            }));
        }
        else {
            const canUseManagedConfig = ((_a = this.apolloConfig) === null || _a === void 0 ? void 0 : _a.graphRef) && ((_b = this.apolloConfig) === null || _b === void 0 ? void 0 : _b.keyHash);
            if (!canUseManagedConfig) {
                throw new Error('When a manual configuration is not provided, gateway requires an Apollo ' +
                    'configuration. See https://www.apollographql.com/docs/apollo-server/federation/managed-federation/ ' +
                    'for more information. Manual configuration options include: ' +
                    '`serviceList`, `supergraphSdl`, and `experimental_updateServiceDefinitions`.');
            }
            const uplinkEndpoints = this.getUplinkEndpoints(this.config);
            await this.initializeSupergraphManager(new supergraphManagers_1.UplinkFetcher({
                graphRef: this.apolloConfig.graphRef,
                apiKey: this.apolloConfig.key,
                uplinkEndpoints,
                maxRetries: (_c = this.config.uplinkMaxRetries) !== null && _c !== void 0 ? _c : uplinkEndpoints.length * 3 - 1,
                subgraphHealthCheck: this.config.serviceHealthCheck,
                fetcher: this.fetcher,
                logger: this.logger,
                fallbackPollIntervalInMs: (_d = this.pollIntervalInMs) !== null && _d !== void 0 ? _d : 10000,
            }));
        }
        const mode = (0, config_1.isManagedConfig)(this.config) ? 'managed' : 'unmanaged';
        this.logger.info(`Gateway successfully loaded schema.\n\t* Mode: ${mode}${this.apolloConfig && this.apolloConfig.graphRef
            ? `\n\t* Service: ${this.apolloConfig.graphRef}`
            : ''}`);
        (0, addExtensions_1.addExtensions)(this.schema);
        return {
            schema: this.schema,
            executor: this.executor,
        };
    }
    getUplinkEndpoints(config) {
        var _a, _b, _c, _d;
        const rawEndpointsString = process.env.APOLLO_SCHEMA_CONFIG_DELIVERY_ENDPOINT;
        const envEndpoints = (_a = rawEndpointsString === null || rawEndpointsString === void 0 ? void 0 : rawEndpointsString.split(',')) !== null && _a !== void 0 ? _a : null;
        return ((_d = (_c = (_b = config.uplinkEndpoints) !== null && _b !== void 0 ? _b : (config.schemaConfigDeliveryEndpoint
            ? [config.schemaConfigDeliveryEndpoint]
            : null)) !== null && _c !== void 0 ? _c : envEndpoints) !== null && _d !== void 0 ? _d : [
            'https://uplink.api.apollographql.com/',
            'https://aws.uplink.api.apollographql.com/',
        ]);
    }
    getIdForSupergraphSdl(supergraphSdl) {
        return (0, utils_createhash_1.createHash)('sha256').update(supergraphSdl).digest('hex');
    }
    async initializeSupergraphManager(supergraphManager) {
        try {
            const result = await supergraphManager.initialize({
                update: this.externalSupergraphUpdateCallback.bind(this),
                healthCheck: this.externalSubgraphHealthCheckCallback.bind(this),
                getDataSource: this.externalGetDataSourceCallback.bind(this),
            });
            if (!(result === null || result === void 0 ? void 0 : result.supergraphSdl)) {
                throw new Error('Provided `supergraphSdl` function did not return an object containing a `supergraphSdl` property');
            }
            if (result === null || result === void 0 ? void 0 : result.cleanup) {
                if (typeof result.cleanup === 'function') {
                    this.toDispose.push(result.cleanup);
                }
                else {
                    this.logger.error('Provided `supergraphSdl` function returned an invalid `cleanup` property (must be a function)');
                }
            }
            this.externalSupergraphUpdateCallback(result.supergraphSdl);
        }
        catch (e) {
            this.state = { phase: 'failed to load' };
            await this.performCleanupAndLogErrors();
            throw e;
        }
        this.state = { phase: 'loaded' };
    }
    externalSupergraphUpdateCallback(supergraphSdl) {
        switch (this.state.phase) {
            case 'failed to load':
                throw new Error("Can't call `update` callback after gateway failed to load.");
            case 'updating schema':
                throw new Error("Can't call `update` callback while supergraph update is in progress.");
            case 'stopped':
                throw new Error("Can't call `update` callback after gateway has been stopped.");
            case 'stopping':
                throw new Error("Can't call `update` callback while gateway is stopping.");
            case 'loaded':
            case 'initialized':
                break;
            default:
                throw new UnreachableCaseError(this.state);
        }
        this.state = { phase: 'updating schema' };
        try {
            this.updateWithSupergraphSdl({
                supergraphSdl,
                id: this.getIdForSupergraphSdl(supergraphSdl),
            });
        }
        finally {
            this.state = { phase: 'loaded' };
        }
    }
    async externalSubgraphHealthCheckCallback(supergraphSdl) {
        const serviceList = this.serviceListFromSupergraphSdl(supergraphSdl);
        const serviceMap = serviceList.reduce((serviceMap, serviceDef) => {
            serviceMap[serviceDef.name] = {
                url: serviceDef.url,
                dataSource: this.createDataSource(serviceDef),
            };
            return serviceMap;
        }, Object.create(null));
        try {
            await this.serviceHealthCheck(serviceMap);
        }
        catch (e) {
            throw new Error('The gateway subgraphs health check failed. Updating to the provided ' +
                '`supergraphSdl` will likely result in future request failures to ' +
                'subgraphs. The following error occurred during the health check:\n' +
                e.message);
        }
    }
    externalGetDataSourceCallback({ name, url, }) {
        return this.getOrCreateDataSource({ name, url });
    }
    updateWithSupergraphSdl(result) {
        if (result.id === this.compositionId) {
            this.logger.debug('No change in composition since last check.');
            return;
        }
        const { schema, supergraphSdl } = this.createSchemaFromSupergraphSdl(result.supergraphSdl);
        const previousSchema = this.schema;
        const previousSupergraphSdl = this.supergraphSdl;
        const previousCompositionId = this.compositionId;
        if (previousSchema) {
            this.logger.info('Updated Supergraph SDL was found.');
        }
        this.compositionId = result.id;
        this.supergraphSdl = supergraphSdl;
        if (!supergraphSdl) {
            this.logger.error("A valid schema couldn't be composed. Falling back to previous schema.");
        }
        else {
            this.updateWithSchemaAndNotify(schema, supergraphSdl);
            if (this.experimental_didUpdateSupergraph) {
                this.experimental_didUpdateSupergraph({
                    compositionId: result.id,
                    supergraphSdl,
                    schema: schema.toGraphQLJSSchema(),
                }, previousCompositionId && previousSupergraphSdl && previousSchema
                    ? {
                        compositionId: previousCompositionId,
                        supergraphSdl: previousSupergraphSdl,
                        schema: previousSchema,
                    }
                    : undefined);
            }
        }
    }
    updateWithSchemaAndNotify(coreSchema, coreSupergraphSdl, legacyDontNotifyOnSchemaChangeListeners = false) {
        if (this.queryPlanStore)
            this.queryPlanStore.flush();
        this.apiSchema = coreSchema.toAPISchema();
        this.schema = (0, addExtensions_1.addExtensions)(wrapSchemaWithAliasResolver(this.apiSchema.toGraphQLJSSchema()));
        this.queryPlanner = new query_planner_1.QueryPlanner(coreSchema);
        if (!legacyDontNotifyOnSchemaChangeListeners) {
            this.onSchemaChangeListeners.forEach((listener) => {
                try {
                    listener(this.schema);
                }
                catch (e) {
                    this.logger.error("An error was thrown from an 'onSchemaChange' listener. " +
                        'The schema will still update: ' +
                        ((e && e.message) || e));
                }
            });
        }
        this.onSchemaLoadOrUpdateListeners.forEach((listener) => {
            try {
                listener({
                    apiSchema: this.schema,
                    coreSupergraphSdl,
                });
            }
            catch (e) {
                this.logger.error("An error was thrown from an 'onSchemaLoadOrUpdate' listener. " +
                    'The schema will still update: ' +
                    ((e && e.message) || e));
            }
        });
    }
    serviceHealthCheck(serviceMap = this.serviceMap) {
        return Promise.all(Object.entries(serviceMap).map(([name, { dataSource }]) => dataSource
            .process({
            kind: types_1.GraphQLDataSourceRequestKind.HEALTH_CHECK,
            request: { query: exports.HEALTH_CHECK_QUERY },
            context: {},
        })
            .then((response) => ({ name, response }))
            .catch((e) => {
            throw new Error(`[${name}]: ${e.message}`);
        })));
    }
    serviceListFromSupergraphSdl(supergraphSdl) {
        return (0, federation_internals_1.buildSupergraphSchema)(supergraphSdl)[1];
    }
    createSchemaFromSupergraphSdl(supergraphSdl) {
        const [schema, serviceList] = (0, federation_internals_1.buildSupergraphSchema)(supergraphSdl);
        this.createServices(serviceList);
        return {
            schema,
            supergraphSdl,
        };
    }
    onSchemaChange(callback) {
        this.onSchemaChangeListeners.add(callback);
        return () => {
            this.onSchemaChangeListeners.delete(callback);
        };
    }
    onSchemaLoadOrUpdate(callback) {
        this.onSchemaLoadOrUpdateListeners.add(callback);
        return () => {
            this.onSchemaLoadOrUpdateListeners.delete(callback);
        };
    }
    getOrCreateDataSource(serviceDef) {
        if (this.serviceMap[serviceDef.name] &&
            serviceDef.url === this.serviceMap[serviceDef.name].url) {
            return this.serviceMap[serviceDef.name].dataSource;
        }
        const dataSource = this.createDataSource(serviceDef);
        this.serviceMap[serviceDef.name] = { url: serviceDef.url, dataSource };
        return dataSource;
    }
    createDataSource(serviceDef) {
        if (!serviceDef.url && !(0, config_1.isLocalConfig)(this.config)) {
            this.logger.error(`Service definition for service ${serviceDef.name} is missing a url`);
        }
        return this.config.buildService
            ? this.config.buildService(serviceDef)
            : new RemoteGraphQLDataSource_1.RemoteGraphQLDataSource({
                url: serviceDef.url,
            });
    }
    createServices(services) {
        for (const serviceDef of services) {
            this.getOrCreateDataSource(serviceDef);
        }
    }
    maybeWarnOnConflictingConfig() {
        var _a, _b;
        const canUseManagedConfig = ((_a = this.apolloConfig) === null || _a === void 0 ? void 0 : _a.graphRef) && ((_b = this.apolloConfig) === null || _b === void 0 ? void 0 : _b.keyHash);
        if (!(0, config_1.isManagedConfig)(this.config) &&
            canUseManagedConfig &&
            !this.warnedStates.remoteWithLocalConfig) {
            this.warnedStates.remoteWithLocalConfig = true;
            this.logger.warn('A local gateway configuration is overriding a managed federation ' +
                'configuration.  To use the managed ' +
                'configuration, do not specify a service list or supergraphSdl locally.');
        }
    }
    validateIncomingRequest(requestContext, operationContext) {
        return opentelemetry_1.tracer.startActiveSpan(opentelemetry_1.OpenTelemetrySpanNames.VALIDATE, (span) => {
            try {
                const variableDefinitions = operationContext.operation
                    .variableDefinitions;
                if (!variableDefinitions)
                    return [];
                const { errors } = (0, values_1.getVariableValues)(operationContext.schema, variableDefinitions, requestContext.request.variables || {});
                if (errors) {
                    span.setStatus({ code: api_1.SpanStatusCode.ERROR });
                }
                return errors || [];
            }
            catch (err) {
                span.setStatus({ code: api_1.SpanStatusCode.ERROR });
                throw err;
            }
            finally {
                span.end();
            }
        });
    }
    async performCleanupAndLogErrors() {
        if (this.toDispose.length === 0)
            return;
        await Promise.all(this.toDispose.map((p) => p().catch((e) => {
            var _a;
            this.logger.error('Error occured while calling user provided `cleanup` function: ' +
                ((_a = e.message) !== null && _a !== void 0 ? _a : e));
        })));
        this.toDispose = [];
    }
    async stop() {
        switch (this.state.phase) {
            case 'initialized':
            case 'failed to load':
                throw Error('ApolloGateway.stop does not need to be called before ApolloGateway.load is called successfully');
            case 'stopped':
                return;
            case 'stopping':
                await this.state.stoppingDonePromise;
                if (this.state.phase !== 'stopped') {
                    throw Error(`Expected to be stopped when done stopping, but instead ${this.state.phase}`);
                }
                return;
            case 'loaded':
                const stoppingDonePromise = this.performCleanupAndLogErrors();
                this.state = {
                    phase: 'stopping',
                    stoppingDonePromise,
                };
                await stoppingDonePromise;
                this.state = { phase: 'stopped' };
                return;
            case 'updating schema': {
                throw Error("`ApolloGateway.stop` shouldn't be called from inside a schema change listener");
            }
            default:
                throw new UnreachableCaseError(this.state);
        }
    }
    __testing() {
        return {
            state: this.state,
            compositionId: this.compositionId,
            supergraphSdl: this.supergraphSdl,
        };
    }
}
exports.ApolloGateway = ApolloGateway;
ApolloGateway.prototype.onSchemaChange = (0, util_1.deprecate)(ApolloGateway.prototype.onSchemaChange, `'ApolloGateway.prototype.onSchemaChange' is deprecated. Use 'ApolloGateway.prototype.onSchemaLoadOrUpdate' instead.`);
function approximateObjectSize(obj) {
    return Buffer.byteLength(JSON.stringify(obj), 'utf8');
}
function wrapSchemaWithAliasResolver(schema) {
    const typeMap = schema.getTypeMap();
    Object.keys(typeMap).forEach((typeName) => {
        const type = typeMap[typeName];
        if ((0, graphql_1.isObjectType)(type) && !(0, graphql_1.isIntrospectionType)(type)) {
            const fields = type.getFields();
            Object.keys(fields).forEach((fieldName) => {
                const field = fields[fieldName];
                field.resolve = executeQueryPlan_1.defaultFieldResolverWithAliasSupport;
            });
        }
    });
    return schema;
}
class UnreachableCaseError extends Error {
    constructor(val) {
        super(`Unreachable case: ${val}`);
    }
}
__exportStar(require("./datasources"), exports);
var supergraphManagers_2 = require("./supergraphManagers");
Object.defineProperty(exports, "UplinkFetcherError", { enumerable: true, get: function () { return supergraphManagers_2.UplinkFetcherError; } });
//# sourceMappingURL=index.js.map