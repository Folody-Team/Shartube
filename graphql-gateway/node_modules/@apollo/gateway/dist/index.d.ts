import { GraphQLService, Unsubscriber } from 'apollo-server-core';
import { GraphQLExecutionResult, GraphQLRequestContextExecutionDidStart } from 'apollo-server-types';
import { GraphQLSchema } from 'graphql';
import { buildOperationContext } from './operationContext';
import { executeQueryPlan, ServiceMap } from './executeQueryPlan';
import { GraphQLDataSource } from './datasources/types';
import { ServiceEndpointDefinition, Experimental_DidFailCompositionCallback, Experimental_DidResolveQueryPlanCallback, Experimental_DidUpdateSupergraphCallback, Experimental_UpdateComposition, CompositionInfo, GatewayConfig } from './config';
import { IntrospectAndCompose, LocalCompose } from './supergraphManagers';
import { ServiceDefinition } from '@apollo/federation-internals';
declare type DataSourceMap = {
    [serviceName: string]: {
        url?: string;
        dataSource: GraphQLDataSource;
    };
};
export declare const HEALTH_CHECK_QUERY = "query __ApolloServiceHealthCheck__ { __typename }";
export declare const SERVICE_DEFINITION_QUERY = "query __ApolloGetServiceDefinition__ { _service { sdl } }";
declare type GatewayState = {
    phase: 'initialized';
} | {
    phase: 'failed to load';
} | {
    phase: 'loaded';
} | {
    phase: 'stopping';
    stoppingDonePromise: Promise<void>;
} | {
    phase: 'stopped';
} | {
    phase: 'updating schema';
};
interface ApolloConfigFromAS2Or3 {
    key?: string;
    keyHash?: string;
    graphRef?: string;
    graphId?: string;
    graphVariant?: string;
}
interface GraphQLServiceEngineConfig {
    apiKeyHash: string;
    graphId: string;
    graphVariant?: string;
}
export declare class ApolloGateway implements GraphQLService {
    schema?: GraphQLSchema;
    private apiSchema?;
    private serviceMap;
    private config;
    private logger;
    private queryPlanStore;
    private apolloConfig?;
    private onSchemaChangeListeners;
    private onSchemaLoadOrUpdateListeners;
    private warnedStates;
    private queryPlanner?;
    private supergraphSdl?;
    private fetcher;
    private compositionId?;
    private state;
    private experimental_didResolveQueryPlan?;
    private experimental_didUpdateSupergraph?;
    private pollIntervalInMs?;
    private toDispose;
    constructor(config?: GatewayConfig);
    private initLogger;
    private initQueryPlanStore;
    private issueConfigurationWarningsIfApplicable;
    load(options?: {
        apollo?: ApolloConfigFromAS2Or3;
        engine?: GraphQLServiceEngineConfig;
    }): Promise<{
        schema: GraphQLSchema;
        executor: <TContext>(requestContext: GraphQLRequestContextExecutionDidStart<TContext>) => Promise<GraphQLExecutionResult>;
    }>;
    private getUplinkEndpoints;
    private getIdForSupergraphSdl;
    private initializeSupergraphManager;
    private externalSupergraphUpdateCallback;
    private externalSubgraphHealthCheckCallback;
    private externalGetDataSourceCallback;
    private updateWithSupergraphSdl;
    private updateWithSchemaAndNotify;
    serviceHealthCheck(serviceMap?: DataSourceMap): Promise<{
        name: string;
        response: import("apollo-server-types").GraphQLResponse;
    }[]>;
    private serviceListFromSupergraphSdl;
    private createSchemaFromSupergraphSdl;
    onSchemaChange(callback: (schema: GraphQLSchema) => void): Unsubscriber;
    onSchemaLoadOrUpdate(callback: (schemaContext: {
        apiSchema: GraphQLSchema;
        coreSupergraphSdl: string;
    }) => void): Unsubscriber;
    private getOrCreateDataSource;
    private createDataSource;
    private createServices;
    private maybeWarnOnConflictingConfig;
    executor: <TContext>(requestContext: GraphQLRequestContextExecutionDidStart<TContext>) => Promise<GraphQLExecutionResult>;
    private validateIncomingRequest;
    private performCleanupAndLogErrors;
    stop(): Promise<void>;
    __testing(): {
        state: GatewayState;
        compositionId: string | undefined;
        supergraphSdl: string | undefined;
    };
}
export { executeQueryPlan, buildOperationContext, ServiceMap, Experimental_DidFailCompositionCallback, Experimental_DidResolveQueryPlanCallback, Experimental_DidUpdateSupergraphCallback, Experimental_UpdateComposition, GatewayConfig, ServiceEndpointDefinition, ServiceDefinition, CompositionInfo, IntrospectAndCompose, LocalCompose, };
export * from './datasources';
export { SupergraphSdlUpdateFunction, SubgraphHealthCheckFunction, GetDataSourceFunction, SupergraphSdlHook, SupergraphManager } from './config';
export { UplinkFetcherError } from "./supergraphManagers";
//# sourceMappingURL=index.d.ts.map