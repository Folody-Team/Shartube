export declare type Maybe<T> = T | null;
export declare type InputMaybe<T> = Maybe<T>;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    Timestamp: any;
};
export declare type ApiMonitoringReport = {
    endedAt: Scalars['Timestamp'];
    error: Error;
    request: Request;
    response?: InputMaybe<Response>;
    startedAt: Scalars['Timestamp'];
    tags?: InputMaybe<Array<Scalars['String']>>;
};
export declare type Error = {
    code: ErrorCode;
    message?: InputMaybe<Scalars['String']>;
};
export declare enum ErrorCode {
    ConnectionFailed = "CONNECTION_FAILED",
    InvalidBody = "INVALID_BODY",
    Other = "OTHER",
    Timeout = "TIMEOUT",
    UnexpectedResponse = "UNEXPECTED_RESPONSE"
}
export declare type FetchError = {
    __typename?: 'FetchError';
    code: FetchErrorCode;
    message: Scalars['String'];
    minDelaySeconds: Scalars['Float'];
};
export declare enum FetchErrorCode {
    AccessDenied = "ACCESS_DENIED",
    AuthenticationFailed = "AUTHENTICATION_FAILED",
    RetryLater = "RETRY_LATER",
    UnknownRef = "UNKNOWN_REF"
}
export declare type HttpHeader = {
    name: Scalars['String'];
    value?: InputMaybe<Scalars['String']>;
};
export declare type Message = {
    __typename?: 'Message';
    body: Scalars['String'];
    level: MessageLevel;
};
export declare enum MessageLevel {
    Error = "ERROR",
    Info = "INFO",
    Warn = "WARN"
}
export declare type Mutation = {
    __typename?: 'Mutation';
    reportError: Scalars['Boolean'];
};
export declare type MutationReportErrorArgs = {
    report?: InputMaybe<ApiMonitoringReport>;
};
export declare type Query = {
    __typename?: 'Query';
    _empty?: Maybe<Scalars['String']>;
    routerConfig: RouterConfigResponse;
};
export declare type QueryRouterConfigArgs = {
    apiKey: Scalars['String'];
    ifAfterId?: InputMaybe<Scalars['ID']>;
    ref: Scalars['String'];
};
export declare type Request = {
    body?: InputMaybe<Scalars['String']>;
    headers?: InputMaybe<Array<HttpHeader>>;
    url: Scalars['String'];
};
export declare type Response = {
    body?: InputMaybe<Scalars['String']>;
    headers?: InputMaybe<Array<HttpHeader>>;
    httpStatusCode: Scalars['Int'];
};
export declare type RouterConfigResponse = FetchError | RouterConfigResult | Unchanged;
export declare type RouterConfigResult = {
    __typename?: 'RouterConfigResult';
    id: Scalars['ID'];
    messages: Array<Message>;
    minDelaySeconds: Scalars['Float'];
    supergraphSDL: Scalars['String'];
};
export declare type Unchanged = {
    __typename?: 'Unchanged';
    id: Scalars['ID'];
    minDelaySeconds: Scalars['Float'];
};
export declare type SupergraphSdlQueryVariables = Exact<{
    apiKey: Scalars['String'];
    ref: Scalars['String'];
    ifAfterId?: InputMaybe<Scalars['ID']>;
}>;
export declare type SupergraphSdlQuery = {
    __typename?: 'Query';
    routerConfig: {
        __typename: 'FetchError';
        code: FetchErrorCode;
        message: string;
    } | {
        __typename: 'RouterConfigResult';
        id: string;
        minDelaySeconds: number;
        supergraphSdl: string;
    } | {
        __typename: 'Unchanged';
    };
};
export declare type OobReportMutationVariables = Exact<{
    input?: InputMaybe<ApiMonitoringReport>;
}>;
export declare type OobReportMutation = {
    __typename?: 'Mutation';
    reportError: boolean;
};
//# sourceMappingURL=graphqlTypes.d.ts.map