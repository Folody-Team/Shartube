import { GraphQLRequestContext, GraphQLResponse, ValueOrPromise } from 'apollo-server-types';
import { ApolloError } from 'apollo-server-errors';
import { GraphQLDataSource, GraphQLDataSourceProcessOptions } from './types';
import { Request as NodeFetchRequest } from 'node-fetch';
import { Fetcher, FetcherResponse } from '@apollo/utils.fetcher';
export declare class RemoteGraphQLDataSource<TContext extends Record<string, any> = Record<string, any>> implements GraphQLDataSource<TContext> {
    fetcher: Fetcher;
    constructor(config?: Partial<RemoteGraphQLDataSource<TContext>> & object & ThisType<RemoteGraphQLDataSource<TContext>>);
    url: string;
    apq: boolean;
    honorSubgraphCacheControlHeader: boolean;
    process(options: GraphQLDataSourceProcessOptions<TContext>): Promise<GraphQLResponse>;
    private sendRequest;
    willSendRequest?(options: GraphQLDataSourceProcessOptions<TContext>): ValueOrPromise<void>;
    private respond;
    didReceiveResponse?(requestContext: Required<Pick<GraphQLRequestContext<TContext>, 'request' | 'response' | 'context'>>): ValueOrPromise<GraphQLResponse>;
    didEncounterError(error: Error, _fetchRequest: NodeFetchRequest, _fetchResponse?: FetcherResponse, _context?: TContext): void;
    parseBody(fetchResponse: FetcherResponse, _fetchRequest?: NodeFetchRequest, _context?: TContext): Promise<object | string>;
    errorFromResponse(response: FetcherResponse): Promise<ApolloError>;
}
//# sourceMappingURL=RemoteGraphQLDataSource.d.ts.map