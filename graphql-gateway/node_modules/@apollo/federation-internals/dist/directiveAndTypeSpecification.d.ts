import { DirectiveLocation, GraphQLError } from "graphql";
import { InputType, OutputType, Schema } from "./definitions";
export declare type DirectiveSpecification = {
    name: string;
    checkOrAdd: (schema: Schema, nameInSchema?: string, asBuiltIn?: boolean) => GraphQLError[];
};
export declare type TypeSpecification = {
    name: string;
    checkOrAdd: (schema: Schema, nameInSchema?: string, asBuiltIn?: boolean) => GraphQLError[];
};
export declare type ArgumentSpecification = {
    name: string;
    type: InputType;
    defaultValue?: any;
};
export declare type FieldSpecification = {
    name: string;
    type: OutputType;
    args?: ArgumentSpecification[];
};
export declare function createDirectiveSpecification({ name, locations, repeatable, argumentFct, }: {
    name: string;
    locations: DirectiveLocation[];
    repeatable?: boolean;
    argumentFct?: (schema: Schema, nameInSchema?: string) => {
        args: ArgumentSpecification[];
        errors: GraphQLError[];
    };
}): DirectiveSpecification;
export declare function createScalarTypeSpecification({ name }: {
    name: string;
}): TypeSpecification;
export declare function createObjectTypeSpecification({ name, fieldsFct, }: {
    name: string;
    fieldsFct: (schema: Schema) => FieldSpecification[];
}): TypeSpecification;
export declare function createUnionTypeSpecification({ name, membersFct, }: {
    name: string;
    membersFct: (schema: Schema) => string[];
}): TypeSpecification;
export declare function createEnumTypeSpecification({ name, values, }: {
    name: string;
    values: {
        name: string;
        description?: string;
    }[];
}): TypeSpecification;
//# sourceMappingURL=directiveAndTypeSpecification.d.ts.map